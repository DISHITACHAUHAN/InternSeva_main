import React, { useState, useRef, useEffect } from 'react';
import './Chatbot.css';
import voxen from '../assets/Ask_Voxen_SVG.svg'

const InternshipChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [language, setLanguage] = useState('English');
  const [mode, setMode] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [filters, setFilters] = useState({
    location: '',
    field: '',
    duration: '',
    type: ''
  });
  
  const messagesEndRef = useRef(null);
  const recognitionRef = useRef(null);

  // Available languages with focus on Indian languages
  const languages = {
    English: { code: 'en-IN', name: 'English' },
    Hindi: { code: 'hi-IN', name: 'рд╣рд┐рдВрджреА' },
    Bengali: { code: 'bn-IN', name: 'ржмрж╛ржВрж▓рж╛' },
    Telugu: { code: 'te-IN', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б' },
    Tamil: { code: 'ta-IN', name: 'родрооро┐ро┤рпН' }
  };

  // Indian internship data with Indian companies and locations
  const internshipData = [
    { 
      id: 1, 
      title: "Frontend Development Intern", 
      company: "TechMahindra", 
      location: "Bangalore, Karnataka", 
      field: "Software Development", 
      duration: "3 months", 
      type: "Paid", 
      description: "Work on web applications using React and Angular. Ideal for students with JavaScript knowledge.", 
      logo: "ЁЯТ╗",
      stipend: "тВ╣30,000/month"
    },
    { 
      id: 2, 
      title: "Data Science Intern", 
      company: "Infosys", 
      location: "Hyderabad, Telangana", 
      field: "Data Science", 
      duration: "6 months", 
      type: "Paid", 
      description: "Analyze datasets and build machine learning models. Python and statistics knowledge required.", 
      logo: "ЁЯУК",
      stipend: "тВ╣25,000/month"
    },
    { 
      id: 3, 
      title: "Marketing Intern", 
      company: "Hindustan Unilever", 
      location: "Mumbai, Maharashtra", 
      field: "Marketing", 
      duration: "4 months", 
      type: "Paid", 
      description: "Develop marketing campaigns and analyze consumer metrics. Creativity and communication skills valued.", 
      logo: "ЁЯУИ",
      stipend: "тВ╣20,000/month"
    },
    { 
      id: 4, 
      title: "UX/UI Design Intern", 
      company: "Flipkart", 
      location: "Bengaluru, Karnataka", 
      field: "Design", 
      duration: "3 months", 
      type: "Paid", 
      description: "Create user interfaces for e-commerce applications. Portfolio required.", 
      logo: "ЁЯОи",
      stipend: "тВ╣25,000/month"
    },
    { 
      id: 5, 
      title: "Content Writing Intern", 
      company: "BYJU'S", 
      location: "Remote", 
      field: "Content", 
      duration: "3 months", 
      type: "Paid", 
      description: "Create educational content for online learning platforms. Good writing skills in English and Hindi required.", 
      logo: "ЁЯУЭ",
      stipend: "тВ╣15,000/month"
    }
  ];

  // Language-specific content with Indian language translations
  const content = {
    English: {
      welcome: "Hello! Welcome to Voxen. Which language do you prefer?",
      languageSet: "Great! How would you like to find internships?",
      suggestOption: "Suggest internships",
      filterOption: "Filter myself",
      modifyFilters: "Modify filters",
      searchWithFilters: "Search with filters",
      startOver: "Start over",
      filtersTitle: "Filter Internships",
      locationLabel: "Location:",
      fieldLabel: "Field:",
      durationLabel: "Duration:",
      typeLabel: "Type:",
      anyLocation: "Any Location",
      anyField: "Any Field",
      anyDuration: "Any Duration",
      anyType: "Any Type",
      searchButton: "Search Internships",
      suggestionsTitle: "Based on your profile, I suggest these internships:",
      foundResults: "I found {count} internships matching your criteria:",
      noResults: "Sorry, no internships match your filters. Would you like to try different criteria?",
      listening: "Listening...",
      speakPrompt: "Click the microphone to speak your message",
      voiceNotSupported: "Voice input is not supported in your browser"
    },
    Hindi: {
      welcome: "рдирдорд╕реНрддреЗ! рдЗрдВрдЯрд░реНрдирдХрдиреЗрдХреНрдЯ рдЗрдВрдбрд┐рдпрд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдЖрдк рдХреМрди рд╕реА рднрд╛рд╖рд╛ рдкрд╕рдВрдж рдХрд░рддреЗ рд╣реИрдВ?",
      languageSet: "рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдХреИрд╕реЗ рдвреВрдВрдврдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
      suggestOption: "рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕реБрдЭрд╛рдПрдВ",
      filterOption: "рдЦреБрдж рдлрд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ",
      modifyFilters: "рдлрд┐рд▓реНрдЯрд░ рд╕рдВрд╢реЛрдзрд┐рдд рдХрд░реЗрдВ",
      searchWithFilters: "рдлрд┐рд▓реНрдЯрд░ рдХреЗ рд╕рд╛рде рдЦреЛрдЬреЗрдВ",
      startOver: "рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ",
      filtersTitle: "рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдлрд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ",
      locationLabel: "рд╕реНрдерд╛рди:",
      fieldLabel: "рдХреНрд╖реЗрддреНрд░:",
      durationLabel: "рдЕрд╡рдзрд┐:",
      typeLabel: "рдкреНрд░рдХрд╛рд░:",
      anyLocation: "рдХреЛрдИ рднреА рд╕реНрдерд╛рди",
      anyField: "рдХреЛрдИ рднреА рдХреНрд╖реЗрддреНрд░",
      anyDuration: "рдХреЛрдИ рднреА рдЕрд╡рдзрд┐",
      anyType: "рдХреЛрдИ рднреА рдкреНрд░рдХрд╛рд░",
      searchButton: "рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдЦреЛрдЬреЗрдВ",
      suggestionsTitle: "рдЖрдкрдХреА рдкреНрд░реЛрдлрд╛рдЗрд▓ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореИрдВ рдпреЗ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕реБрдЭрд╛рддрд╛ рд╣реВрдВ:",
      foundResults: "рдореБрдЭреЗ рдЖрдкрдХреА criteria рд╕реЗ рдореЗрд▓ рдЦрд╛рддреА {count} рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдорд┐рд▓реА:",
      noResults: "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдХреЛрдИ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдЖрдкрдХреЗ рдлрд┐рд▓реНрдЯрд░ рд╕реЗ рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддреАред рдХреНрдпрд╛ рдЖрдк different criteria рдЖрдЬрд╝рдорд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
      listening: "рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...",
      speakPrompt: "рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ",
      voiceNotSupported: "рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ voice input supported рдирд╣реАрдВ рд╣реИ"
    },
    Bengali: {
      welcome: "рж╣рзНржпрж╛рж▓рзЛ! ржЗржирзНржЯрж╛рж░рзНржиржХрж╛ржирзЗржХрзНржЯ ржЗржирзНржбрж┐ржпрж╝рж╛рждрзЗ рж╕рзНржмрж╛ржЧрждржоред ржЖржкржирж┐ ржХрзЛржи ржнрж╛рж╖рж╛ ржкржЫржирзНржж ржХрж░рзЗржи?",
      languageSet: "ржжрж╛рж░рзБржг! ржЖржкржирж┐ ржХрзАржнрж╛ржмрзЗ ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк ржЦрзБржБржЬрждрзЗ ржЪрж╛ржи?",
      suggestOption: "ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рзБржи",
      filterOption: "ржирж┐ржЬрзЗ ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзБржи",
      modifyFilters: "ржлрж┐рж▓рзНржЯрж╛рж░ рж╕ржВрж╢рзЛржзржи ржХрж░рзБржи",
      searchWithFilters: "ржлрж┐рж▓рзНржЯрж╛рж░ ржжрж┐ржпрж╝рзЗ ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи",
      startOver: "ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржи",
      filtersTitle: "ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзБржи",
      locationLabel: "ржЕржмрж╕рзНржерж╛ржи:",
      fieldLabel: "ржХрзНрж╖рзЗрждрзНрж░:",
      durationLabel: "рж╕ржоржпрж╝рж╕рзАржорж╛:",
      typeLabel: "ржзрж░ржи:",
      anyLocation: "ржпрзЗржХрзЛржирзЛ ржЕржмрж╕рзНржерж╛ржи",
      anyField: "ржпрзЗржХрзЛржирзЛ ржХрзНрж╖рзЗрждрзНрж░",
      anyDuration: "ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝рж╕рзАржорж╛",
      anyType: "ржпрзЗржХрзЛржирзЛ ржзрж░ржи",
      searchButton: "ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи",
      suggestionsTitle: "ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржПрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ, ржЖржорж┐ ржПржЗ ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржкржЧрзБрж▓рж┐ рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рж┐:",
      foundResults: "ржЖржкржирж╛рж░ ржорж╛ржиржжржгрзНржбрзЗрж░ рж╕рж╛ржерзЗ ржорзЗрж▓рзЗ ржПржоржи {count}ржЯрж┐ ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк ржкрзЗржпрж╝рзЗржЫрж┐:",
      noResults: "ржжрзБржГржЦрж┐ржд, ржХрзЛржи ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк ржЖржкржирж╛рж░ ржлрж┐рж▓рзНржЯрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржорзЗрж▓рзЗ ржирж╛ред ржЖржкржирж┐ ржХрж┐ ржнрж┐ржирзНржи ржорж╛ржиржжржгрзНржб ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржЪрж╛ржи?",
      listening: "рж╢рзБржиржЫрж┐...",
      speakPrompt: "ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛ ржмрж▓рждрзЗ ржорж╛ржЗржХрзНрж░рзЛржлрзЛржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи",
      voiceNotSupported: "ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржнржпрж╝рзЗрж╕ ржЗржиржкрзБржЯ рж╕ржорж░рзНржерж┐ржд ржиржпрж╝"
    },
    Telugu: {
      welcome: "р░╣р░▓р▒Л! р░Зр░Вр░Яр░░р▒Нр░ир▒Н р░Хр░ир▒Жр░Хр▒Нр░Яр▒Н р░Зр░Вр░бр░┐р░пр░╛р░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В. р░ор▒Ар░░р▒Б р░П р░нр░╛р░╖р░ир▒Б р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д р░Зр░╕р▒Нр░др░╛р░░р▒Б?",
      languageSet: "р░Ер░жр▒Нр░нр▒Бр░др░В! р░ор▒Ар░░р▒Б р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р░ир▒Б р░Ор░▓р░╛ р░Хр░ир▒Бр░Чр▒Кр░ир░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
      suggestOption: "р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р░ир▒Б р░╕р▒Вр░Ър░┐р░Вр░Ър░Вр░бр░┐",
      filterOption: "р░ир░╛р░Хр▒Б р░оfilter р░Ър▒Зр░╕р▒Бр░Хр▒Лр░Вр░бр░┐",
      modifyFilters: "р░лр░┐р░▓р▒Нр░Яр░░р▒Нр░▓р░ир▒Б р░╕р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐",
      searchWithFilters: "р░лр░┐р░▓р▒Нр░Яр░░р▒Нр░▓р░др▒Л р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐",
      startOver: "р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
      filtersTitle: "р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р░ир▒Б р░лр░┐р░▓р▒Нр░Яр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      locationLabel: "р░╕р▒Нр░ер░╛р░ир░В:",
      fieldLabel: "р░лр▒Ар░▓р▒Нр░бр▒Н:",
      durationLabel: "р░Хр░╛р░▓р░╡р▒Нр░пр░╡р░зр░┐:",
      typeLabel: "р░░р░Хр░В:",
      anyLocation: "р░Пр░жр▒Ир░ир░╛ р░╕р▒Нр░ер░╛р░ир░В",
      anyField: "р░Пр░жр▒Ир░ир░╛ р░лр▒Ар░▓р▒Нр░бр▒Н",
      anyDuration: "р░Пр░жр▒Ир░ир░╛ р░Хр░╛р░▓р░╡р▒Нр░пр░╡р░зр░┐",
      anyType: "р░Пр░жр▒Ир░ир░╛ р░░р░Хр░В",
      searchButton: "р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р░ир▒Б р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐",
      suggestionsTitle: "р░ор▒А р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░Жр░зр░╛р░░р░Вр░Чр░╛, р░ир▒Зр░ир▒Б р░И р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р░ир▒Б р░╕р▒Вр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б:",
      foundResults: "р░ор▒А р░кр▒Нр░░р░ор░╛р░гр░╛р░▓р░др▒Л match р░Ер░пр▒Нр░пр▒З {count} р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р▒Б р░ир░╛р░Хр▒Б р░жр▒Кр░░р░┐р░Хр░╛р░пр░┐:",
      noResults: "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ор▒А р░лр░┐р░▓р▒Нр░Яр░░р▒Нр░▓р░др▒Л р░П р░Зр░Вр░Яр░░р▒Нр░ир▒Нр░╖р░┐р░кр▒Нр░▓р▒Б match р░Хр░╛р░╡р▒Б. р░ор▒Ар░░р▒Б р░╡р▒Зр░░р▒З р░кр▒Нр░░р░ор░╛р░гр░╛р░▓р░ир▒Б р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р░╛?",
      listening: "р░╡р░┐р░ир░бр░В...",
      speakPrompt: "р░ор▒А р░╕р░Вр░жр▒Зр░╢р░В р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Яр░╛р░ир░┐р░Хр░┐ р░ор▒Ир░Хр▒Нр░░р▒Лр░лр▒Лр░ир▒Нр░кр▒И р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      voiceNotSupported: "р░ор▒А р░мр▒Нр░░р▒Мр░Ьр░░р▒Нр░▓р▒Л voice input supported р░Хр░╛р░жр▒Б"
    },
    Tamil: {
      welcome: "ро╡рогроХрпНроХроорпН! роЗрогрпНроЯро░рпНройрпНроХройрпЖроХрпНроЯрпН роЗроирпНродро┐ропро╛ро╡ро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН. роирпАроЩрпНроХро│рпН роОроирпНрод роорпКро┤ро┐ропрпИ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
      languageSet: "роЕро░рпБроорпИ! роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпИ роОро╡рпНро╡ро╛ро▒рпБ роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
      suggestOption: "роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпИ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро╡рпБроорпН",
      filterOption: "роиро╛ройрпЗ ро╡роЯро┐роХроЯрпНроЯро╡рпБроорпН",
      modifyFilters: "ро╡роЯро┐рокрпНрокро╛ройрпНроХро│рпИ рооро╛ро▒рпНро▒ро╡рпБроорпН",
      searchWithFilters: "ро╡роЯро┐рокрпНрокро╛ройрпНроХро│рпБроЯройрпН родрпЗроЯро╡рпБроорпН",
      startOver: "роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХро╡рпБроорпН",
      filtersTitle: "роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпИ ро╡роЯро┐роХроЯрпНроЯро╡рпБроорпН",
      locationLabel: "роЗроЯроорпН:",
      fieldLabel: "родрпБро▒рпИ:",
      durationLabel: "роХро╛ро▓ роЕро│ро╡рпБ:",
      typeLabel: "ро╡роХрпИ:",
      anyLocation: "роОроирпНрод роЗроЯроорпБроорпН",
      anyField: "роОроирпНрод родрпБро▒рпИропрпБроорпН",
      anyDuration: "роОроирпНрод роХро╛ро▓ роЕро│ро╡рпБроорпН",
      anyType: "роОроирпНрод ро╡роХрпИропрпБроорпН",
      searchButton: "роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпИ родрпЗроЯро╡рпБроорпН",
      suggestionsTitle: "роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЗроирпНрод роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпИ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро┐ро▒рпЗройрпН:",
      foundResults: "роЙроЩрпНроХро│рпН criteriaроХрпНроХрпБ рокрпКро░рпБроирпНродрпБроорпН {count} роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпН роХро┐роЯрпИродрпНродрпБро│рпНро│рой:",
      noResults: "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН ро╡роЯро┐рокрпНрокро╛ройрпНроХро│рпБроЯройрпН рокрпКро░рпБроирпНродрпБроорпН роЗрогрпНроЯро░рпНройрпНро╖ро┐рокрпНрокрпБроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ. ро╡рпЖро╡рпНро╡рпЗро▒рпБ criteria роорпБропро▒рпНроЪро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│ро╛?",
      listening: "роХрпЗроЯрпНроХро┐ро▒родрпБ...",
      speakPrompt: "роЙроЩрпНроХро│рпН роЪрпЖропрпНродро┐ропрпИ рокрпЗроЪ роорпИроХрпНро░рпЛроГрокрпЛройрпИ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН",
      voiceNotSupported: "роЙроЩрпНроХро│рпН browser-ро▓рпН voice input supported роЗро▓рпНро▓рпИ"
    }
  };

  // Scroll to bottom of messages
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Initialize speech recognition if available
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      
      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        handleVoiceInput(transcript);
      };
      
      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
      
      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error', event.error);
        setIsListening(false);
      };
    }
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // Simulate typing with delay
  const simulateTyping = (callback, delay = 1000) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      callback();
    }, delay);
  };

  // Handle opening the chatbot
  const handleOpen = () => {
    setIsOpen(true);
    if (messages.length === 0) {
      simulateTyping(() => {
        const welcomeMessage = { 
          text: content[language].welcome,
          sender: 'bot',
          options: Object.keys(languages)
        };
        setMessages([welcomeMessage]);
      }, 800);
    }
  };

  // Handle voice input
  const handleVoiceInput = (text) => {
    // Check if the text matches any language option
    const matchedLanguage = Object.keys(languages).find(
      lang => text.toLowerCase().includes(lang.toLowerCase())
    );
    
    if (matchedLanguage) {
      handleOptionSelect(matchedLanguage);
      return;
    }
    
    // Check if the text matches any other options
    const currentMessage = messages[messages.length - 1];
    if (currentMessage && currentMessage.options) {
      const matchedOption = currentMessage.options.find(
        option => text.toLowerCase().includes(option.toLowerCase())
      );
      
      if (matchedOption) {
        handleOptionSelect(matchedOption);
        return;
      }
    }
    
    // If no specific option matched, treat as free text input
    const userMessage = { text, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    
    simulateTyping(() => {
      const botMessage = { 
        text: `I heard: "${text}". Please select from the available options.`,
        sender: 'bot',
        options: currentMessage.options
      };
      setMessages(prev => [...prev, botMessage]);
    });
  };

  // Start voice recognition
  const startListening = () => {
    if (recognitionRef.current) {
      setIsListening(true);
      recognitionRef.current.lang = languages[language]?.code || 'en-IN';
      recognitionRef.current.start();
    } else {
      const botMessage = { 
        text: content[language].voiceNotSupported,
        sender: 'bot'
      };
      setMessages(prev => [...prev, botMessage]);
    }
  };

  // Stop voice recognition
  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  // Handle option selection
  const handleOptionSelect = (option) => {
    const userMessage = { text: option, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);

    if (!language) {
      // Language selection
      setLanguage(option);
      simulateTyping(() => {
        const botMessage = { 
          text: content[option].languageSet,
          sender: 'bot',
          options: [content[option].suggestOption, content[option].filterOption]
        };
        setMessages(prev => [...prev, botMessage]);
      });
    } else if (!mode) {
      // Mode selection
      setMode(option.includes(content[language].suggestOption) ? 'suggest' : 'filter');
      
      simulateTyping(() => {
        if (option.includes(content[language].suggestOption)) {
          getInternshipSuggestions();
        } else {
          askForFilters();
        }
      });
    } else if (option === content[language].modifyFilters || option === content[language].searchWithFilters) {
      // Handle modify filters option
      simulateTyping(() => {
        askForFilters();
      });
    } else if (option === content[language].startOver) {
      // Handle start over option
      handleReset();
    }
  };

  // Handle filter change
  const handleFilterChange = (filterType, value) => {
    setFilters(prev => ({ ...prev, [filterType]: value }));
  };

  // Apply filters
  const handleApplyFilters = () => {
    const userMessage = { 
      text: `Applied filters: Location - ${filters.location || content[language].anyLocation}, Field - ${filters.field || content[language].anyField}, Duration - ${filters.duration || content[language].anyDuration}, Type - ${filters.type || content[language].anyType}`,
      sender: 'user' 
    };
    setMessages(prev => [...prev, userMessage]);
    simulateTyping(() => {
      performFilterSearch();
    });
  };

  // Get internship suggestions
  const getInternshipSuggestions = () => {
    const suggestedInternships = internshipData.slice(0, 3); // Get first 3 internships as suggestions
    
    const botMessage = { 
      text: content[language].suggestionsTitle, 
      sender: 'bot',
      internships: suggestedInternships,
      options: [content[language].searchWithFilters, content[language].startOver]
    };
    setMessages(prev => [...prev, botMessage]);
  };

  // Ask for filters
  const askForFilters = () => {
    const botMessage = { 
      text: content[language].filtersTitle, 
      sender: 'bot',
      showFilters: true
    };
    setMessages(prev => [...prev, botMessage]);
    setShowFilters(true);
  };

  // Perform filter-based search
  const performFilterSearch = () => {
    // Filter internships based on selected filters
    const filteredInternships = internshipData.filter(internship => {
      return (
        (!filters.location || internship.location.toLowerCase().includes(filters.location.toLowerCase())) &&
        (!filters.field || internship.field.toLowerCase() === filters.field.toLowerCase()) &&
        (!filters.duration || internship.duration.toLowerCase() === filters.duration.toLowerCase()) &&
        (!filters.type || internship.type.toLowerCase() === filters.type.toLowerCase())
      );
    });
    
    let responseText = '';
    if (filteredInternships.length > 0) {
      responseText = content[language].foundResults.replace('{count}', filteredInternships.length);
    } else {
      responseText = content[language].noResults;
    }
    
    const botMessage = { 
      text: responseText, 
      sender: 'bot',
      internships: filteredInternships,
      options: [content[language].startOver, content[language].modifyFilters]
    };
    setMessages(prev => [...prev, botMessage]);
    setShowFilters(false);
  };

  // Reset conversation
  const handleReset = () => {
    setLanguage('English');
    setMode(null);
    setFilters({ location: '', field: '', duration: '', type: '' });
    setShowFilters(false);
    
    simulateTyping(() => {
      const welcomeMessage = { 
        text: content['English'].welcome,
        sender: 'bot',
        options: Object.keys(languages)
      };
      setMessages([welcomeMessage]);
    });
  };

  // Text-to-speech function
  const speakText = (text) => {
    if ('speechSynthesis' in window) {
      const speech = new SpeechSynthesisUtterance(text);
      speech.lang = languages[language]?.code || 'en-IN';
      window.speechSynthesis.speak(speech);
    }
  };

  return (
    <div className="chatbot-container">
      {!isOpen && (
        <button className="chatbot-button" onClick={handleOpen}>
          <span className="chat-icon"><img src={voxen} alt="" /></span>
          <span className="pulse-ring"></span>
        </button>
      )}
      
      {isOpen && (
        <div className="chatbot-popup">
          <div className="chatbot-header">
            <div className="header-info">
              <div className="avatar">I</div>
              <div>
                <h3>Voxen</h3>
                <p>Online тАв Ready to help</p>
              </div>
            </div>
            <button className="close-button" onClick={() => setIsOpen(false)}>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>
          
          <div className="chatbot-messages">
            <div className="welcome-message">
              <p>ЁЯСЛ рдирдорд╕реНрддреЗ! I'm your Voxen assistant. I can help you find the perfect internship opportunity in India!</p>
            </div>
            
            {messages.map((message, index) => (
              <div key={index} className={`message ${message.sender}`}>
                {message.sender === 'bot' && (
                  <div className="avatar">I</div>
                )}
                <div className="message-content">
                  <div className="message-text">
                    {message.text.split('\n').map((line, i) => (
                      <p key={i}>{line}</p>
                    ))}
                  </div>
                  
                  {message.options && (
                    <div className="message-options">
                      {message.options.map((option, i) => (
                        <button 
                          key={i} 
                          className="option-button"
                          onClick={() => handleOptionSelect(option)}
                        >
                          {option}
                        </button>
                      ))}
                    </div>
                  )}
                  
                  {message.internships && message.internships.length > 0 && (
                    <div className="internships-list">
                      <h4>Internship Matches:</h4>
                      {message.internships.map(internship => (
                        <div key={internship.id} className="internship-card">
                          <div className="internship-logo">{internship.logo}</div>
                          <div className="internship-info">
                            <h5>{internship.title}</h5>
                            <p className="company">{internship.company} тАв {internship.location}</p>
                            <p className="field">{internship.field} | {internship.duration} | {internship.type}</p>
                            <p className="stipend">{internship.stipend}</p>
                            <p className="description">{internship.description}</p>
                          </div>
                          <button className="apply-button">Apply</button>
                        </div>
                      ))}
                    </div>
                  )}
                  
                  {message.showFilters && (
                    <div className="filters-container">
                      <h4>{content[language].filtersTitle}</h4>
                      <div className="filter-group">
                        <label>{content[language].locationLabel}</label>
                        <select 
                          value={filters.location} 
                          onChange={(e) => handleFilterChange('location', e.target.value)}
                        >
                          <option value="">{content[language].anyLocation}</option>
                          <option value="Bangalore">Bangalore, Karnataka</option>
                          <option value="Hyderabad">Hyderabad, Telangana</option>
                          <option value="Mumbai">Mumbai, Maharashtra</option>
                          <option value="Remote">Remote</option>
                          <option value="Pune">Pune, Maharashtra</option>
                          <option value="Chennai">Chennai, Tamil Nadu</option>
                          <option value="Delhi">Delhi</option>
                        </select>
                      </div>
                      
                      <div className="filter-group">
                        <label>{content[language].fieldLabel}</label>
                        <select 
                          value={filters.field} 
                          onChange={(e) => handleFilterChange('field', e.target.value)}
                        >
                          <option value="">{content[language].anyField}</option>
                          <option value="Software Development">Software Development</option>
                          <option value="Data Science">Data Science</option>
                          <option value="Marketing">Marketing</option>
                          <option value="Design">Design</option>
                          <option value="Biotechnology">Biotechnology</option>
                          <option value="Finance">Finance</option>
                          <option value="Content">Content</option>
                          <option value="Engineering">Engineering</option>
                        </select>
                      </div>
                      
                      <div className="filter-group">
                        <label>{content[language].durationLabel}</label>
                        <select 
                          value={filters.duration} 
                          onChange={(e) => handleFilterChange('duration', e.target.value)}
                        >
                          <option value="">{content[language].anyDuration}</option>
                          <option value="3 months">3 months</option>
                          <option value="4 months">4 months</option>
                          <option value="6 months">6 months</option>
                        </select>
                      </div>
                      
                      <div className="filter-group">
                        <label>{content[language].typeLabel}</label>
                        <select 
                          value={filters.type} 
                          onChange={(e) => handleFilterChange('type', e.target.value)}
                        >
                          <option value="">{content[language].anyType}</option>
                          <option value="Paid">Paid</option>
                          <option value="Unpaid">Unpaid</option>
                        </select>
                      </div>
                      
                      <button 
                        className="apply-filters-button"
                        onClick={handleApplyFilters}
                      >
                        {content[language].searchButton}
                      </button>
                    </div>
                  )}
                </div>
                
                {message.sender === 'bot' && (
                  <button 
                    className="speak-button"
                    onClick={() => speakText(message.text)}
                    title="Read aloud"
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M12 4.5C11.2044 4.5 10.4413 4.81607 9.87868 5.37868C9.31607 5.94129 9 6.70435 9 7.5V12C9 12.7956 9.31607 13.5587 9.87868 14.1213C10.4413 14.6839 11.2044 15 12 15C12.7956 15 13.5587 14.6839 14.1213 14.1213C14.6839 13.5587 15 12.7956 15 12V7.5C15 6.70435 14.6839 5.94129 14.1213 5.37868C13.5587 4.81607 12.7956 4.5 12 4.5Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M18 12C18 12.7879 17.8448 13.5681 17.5433 14.2961C17.2417 15.0241 16.7998 15.6855 16.2426 16.2426C15.6855 16.7998 15.0241 17.2417 14.2961 17.5433C13.5681 17.8448 12.7879 18 12 18C11.2121 18 10.4319 17.8448 9.7039 17.5433C8.97595 17.2417 8.31451 16.7998 7.75736 16.2426C7.20021 15.6855 6.75825 15.0241 6.45672 14.2961C6.15519 13.5681 6 12.7879 6 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M19 12C19 14.3869 18.0518 16.6761 16.364 18.364C14.6761 20.0518 12.3869 21 10 21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </button>
                )}
              </div>
            ))}
            
            {isTyping && (
              <div className="message bot">
                <div className="avatar">I</div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className="chatbot-input">
            <div className="voice-input-prompt">
              {isListening ? (
                <div className="listening-indicator">
                  <span className="pulse-dot"></span>
                  {content[language].listening}
                  <button className="stop-listening-button" onClick={stopListening}>
                    Stop
                  </button>
                </div>
              ) : (
                <p>{content[language].speakPrompt}</p>
              )}
            </div>
            
            <div className="input-controls">
              <button 
                className={`voice-button ${isListening ? 'listening' : ''}`}
                onClick={isListening ? stopListening : startListening}
                title="Voice input"
              >
                {isListening ? (
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="6" y="6" width="12" height="12" rx="1" fill="currentColor"/>
                  </svg>
                ) : (
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2C11.2044 2 10.4413 2.31607 9.87868 2.87868C9.31607 3.44129 9 4.20435 9 5V12C9 12.7956 9.31607 13.5587 9.87868 14.1213C10.4413 14.6839 11.2044 15 12 15C12.7956 15 13.5587 14.6839 14.1213 14.1213C14.6839 13.5587 15 12.7956 15 12V5C15 4.20435 14.6839 3.44129 14.1213 2.87868C13.5587 2.31607 12.7956 2 12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M19 10V12C19 13.8565 18.2625 15.637 16.9497 16.9497C15.637 18.2625 13.8565 19 12 19C10.1435 19 8.36301 18.2625 7.05025 16.9497C5.7375 15.637 5 13.8565 5 12V10" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M12 19V22" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                )}
              </button>
              
              <button className="reset-button" onClick={handleReset}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M4 4V9H4.58152M19.9381 11C19.446 7.05369 16.0796 4 12 4C8.64262 4 5.76829 6.06817 4.58152 9M4.58152 9H9M20 20V15H19.4185M19.4185 15C18.2317 17.9318 15.3574 20 12 20C7.92038 20 4.55399 16.9463 4.06189 13M19.4185 15H15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
                {content[language].startOver}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InternshipChatbot;